// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  STUDENT
  PROFESSOR
}

model User {
  id            Int              @id @default(autoincrement())
  user_type     UserType
  name          String          @db.VarChar(25)
  dob           DateTime
  
  credentials   User_Credentials?
  profile       Profile?
  
  // Profile Avatar
  image_data    String?          @db.Text

  // Professor-specific relationships
  professor_page ProfessorPage?
  courses_taught Course[]
  
  // Comments and ratings created by a user
  comments      Comment[]
  ratings       Rating[]

  // User Uploaded Files
  files File[]
  
  created_at    DateTime        @default(now())
  updated_at    DateTime        @updatedAt
}

model User_Credentials {
  id            Int      @id @default(autoincrement())
  school_email  String   @db.VarChar(50)
  password      String   @db.VarChar(255)
  
  user          User     @relation(fields: [user_id], references: [id])
  user_id       Int      @unique
  
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
}

model Profile {
  id            Int      @id @default(autoincrement())
  blurb         String?  @db.VarChar(255)
  description   String?  @db.Text
  image_data    String?  @db.Text
  user          User     @relation(fields: [user_id], references: [id])
  user_id       Int      @unique
  
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
}

model ProfessorPage {
  id              Int      @id @default(autoincrement())
  bio             String?  @db.Text
  office_hours    String?  @db.VarChar(255)
  office_location String?  @db.VarChar(255)
  
  // File storage for profile image
  image_data      String?  @db.Text
  
  professor       User     @relation(fields: [professor_id], references: [id])
  professor_id    Int      @unique
  
  comments        Comment[]

  ratings         Rating[]

  rating          Float   @default(0.0)      // Average rating store
  
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
}

model Course {
  id            Int      @id @default(autoincrement())
  course_code   String   @unique @db.VarChar(15)
  title         String   @db.VarChar(255)
  description   String   @db.Text
  credits       Int
  
  // File storage for syllabus
  syllabus_data  String?  @db.Text
  
  // Relationships
  professor     User     @relation(fields: [professor_id], references: [id])
  professor_id  Int

  subject       Subject  @relation(fields: [subject_id], references: [id])
  subject_id    Int
  
  majors        Major[]  // Which majors require this course
  
  prerequisites     Course[]  @relation("CoursePrerequisites")
  required_for      Course[]  @relation("CoursePrerequisites")
  
  comments      Comment[]

  ratings       Rating[]

  rating        Float   @default(0.0)      // Average rating store
  
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  @@index([professor_id])
}

model Subject {
  id            Int      @id @default(autoincrement())
  name          String   @unique @db.VarChar(50)    // e.g., "Computer Science", "Mathematics"
  code          String   @unique @db.VarChar(10)    // e.g., "CS", "MATH"
  description   String?  @db.Text
  
  courses       Course[]
  
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
}

model Major {
  id            Int      @id @default(autoincrement())
  name          String   @unique @db.VarChar(100)   // e.g., "Computer Science"
  description   String?  @db.Text
  
  courses       Course[] // Required courses for this major
  
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
}

model Comment {
  id                Int       @id @default(autoincrement())
  content           String    @db.Text
  
  user              User      @relation(fields: [user_id], references: [id])
  user_id           Int
  
  course            Course?   @relation(fields: [course_id], references: [id])
  course_id         Int?
  professor_page    ProfessorPage? @relation(fields: [professor_page_id], references: [id])
  professor_page_id Int?
  
  parent_comment    Comment?  @relation("CommentReplies", fields: [parent_id], references: [id])
  parent_id         Int?
  replies           Comment[] @relation("CommentReplies")
  
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt

  @@index([user_id])
  @@index([course_id])
  @@index([professor_page_id])
  @@index([parent_id])
}

model Rating {
  id              Int           @id @default(autoincrement())
  value           Float         @db.DoublePrecision
  user            User          @relation(fields: [userId], references: [id])
  userId          Int
  professorPage   ProfessorPage? @relation(fields: [professorPageId], references: [id])
  professorPageId Int?
  course          Course?       @relation(fields: [courseId], references: [id])
  courseId        Int?

  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt

  @@unique([userId, professorPageId], name: "user_professor_unique")
  @@unique([userId, courseId], name: "user_course_unique")
}

// Store file objects using JSON
model File {
  id                Int       @id @default(autoincrement())
  title             String    @unique @db.VarChar(50)
  type              String    @db.Text
  content           String    @db.Text
  
  user              User      @relation(fields: [user_id], references: [id])
  user_id           Int

  @@index([user_id])
}
